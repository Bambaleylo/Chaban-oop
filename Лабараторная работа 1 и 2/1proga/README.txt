Задание:

 Цифрами будут помечены некоторые комментарии заданий в коде.

(1)Определить класс Person, который имеет  
•	закрытое поле типа string, в котором хранится имя; 
•	закрытое поле типа string, в котором хранится фамилия; 
•	закрытое поле типа System.DateTime для даты рождения. 
 
(2)В классе Person определить конструкторы: 
•	конструктор  c тремя параметрами типа string, string, DateTime для инициализации 
всех полей класса;  
•	конструктор  без  параметров,  инициализирующий  все  поля  класса  некоторыми 
значениями по умолчанию. 
 
(3)В классе Person определить свойства c методами get и set: 
•	свойство типа string для доступа к полю с именем;  
•	свойство типа string для доступа к полю с фамилией; 
•	свойство типа DateTime для доступа к полю с датой рождения; 
•	свойство типа int c методами get и set для получения информации(get) и изменения 
(set)  года  рождения  в  закрытом  поле  типа  DateTime,  в  котором  хранится  дата 
рождения. 
 
(4)В классе Person определить 
•	перегруженную(override)  версию  виртуального  метода  string  ToString()  для 
формирования строки со значениями всех полей класса; 
•	виртуальный метод string ToShortString(), который возвращает строку, содержащую 
только имя и фамилию. 
 
(5)В  классе  Person  и  в  классах,  дополнительно указанных в вариантах, надо  
•	переопределить (override) виртуальный метод bool Equals (object obj); 
•	определить операции  ==  и  != ; 
•	переопределить виртуальный метод int GetHashCode();
(6)Определить интерфейс  
interface IDateAndCopy 
{  
object DeepCopy(); 
DateTime Date { get; set; } 
}
(7)В классе Person дополнительно  
•	переопределить метод virtial bool Equals (object obj) и определить операции == и != 
так,  чтобы  равенство  объектов  типа  Person  трактовалось  как  совпадение  всех 
данных объектов, а не ссылок на объекты Person;  
•	переопределить виртуальный метод int GetHashCode(); 
•	определить виртуальный метод object DeepCopy(); 
•	реализовать интерфейс IDateAndCopy. 


(8)Определить  тип  Education  -  перечисление(enum)  со  значениями: 
•	Specialist 
•	Вachelor 
•	SecondEducation. 
 
(9)Определить  класс   Exam,  который  имеет  три  открытых  автореализуемых свойства, 
доступных для чтения и записи: 
•	свойство типа string, в котором хранится название предмета;  
•	свойство типа int, в котором хранится оценка; 
•	свойство типа System.DateTime для даты экзамена. 
(10)В классе Exam определить: 
•	конструктор  с  параметрами  типа  string,  int  и  DateTime  для  инициализации  всех 
свойств класса;  
•	конструктор без параметров, инициализирующий все свойства класса некоторыми 
значениями по умолчанию; 
•	перегруженную(override)  версию  виртуального  метода  string  ToString()  для 
формирования строки со значениями всех свойств класса;  
•	реализовать интерфейс IDateAndCopy. 
(11)Определить  класс  Test,  который  имеет  два  открытых  автореализуемых свойства, 
доступных для чтения и записи: 
•	свойство типа string, в котором хранится название предмета;  
•	свойство типа bool для информации о том, сдан зачет или нет. 
(12)В классе Test определить: 
•	конструктор c параметрами типа string и bool для инициализации свойств класса;  
•	конструктор  без параметров, инициализирующий все свойства класса некоторыми 
значениями по умолчанию; 
•	перегруженную(override)  версию  виртуального  метода  string  ToString()  для 
формирования строки со значениями всех свойств класса;  
•	реализовать интерфейс IDateAndCopy. 
(13)Определить класс Student как производный от класса Person.  
Класс Student имеет следующие поля: 
•	закрытое поле типа Education для информации о форме обучения; 
•	закрытое поле типа int для номера группы; 
•	закрытое поле типа System.Collections.ArrayList, в котором хранится список зачетов 
(объекты типа Test); 
•	закрытое поле типа Exam[] для информации об экзаменах, которые сдал студент. 
(14)В классе Student определить конструкторы: 
•	конструктор  c  параметрами    типа  Person,  Education,  int  для  инициализации 
соответствующих полей класса; 
•	конструктор без параметров для инициализации по умолчанию; 
(15)В классе Student определить свойства c методами get и set: 
•	свойство типа Person; метод  get свойства возвращает объект типа Person,  данные 
которого совпадают с данными подобъекта базового класса, метод set присваивает 
значения полям из подобъекта базового класса;  
•	свойство типа System.Collections.ArrayList  с методами get и set для доступа к полю 
со списком зачетов;  
•	свойство типа Exam[] для доступа к полю со списком экзаменов. 
(16)В классе Student определить  
•	свойство типа double (только с методом get), в котором вычисляется средний балл 
как среднее значение оценок в списке сданных экзаменов;  метод  void  AddExams  (  params  Exam[]  )    для  добавления  элементов  в  список экзаменов;  
•	метод void AddTests ( params Test[] )  для добавления элементов в список тестов; 
•	перегруженная  версия  виртуального  метода  string  ToString()  для  формирования 
строки со значениями всех полей класса, включая список зачетов и экзаменов; 
•	виртуальный  метод  string  ToShortString(),  который  формирует  строку  со 
значениями  всех  полей  класса  без  списка  зачетов  и  экзаменов,  но  со  значением среднего балла. 
(17)Дополнительно в классе Student  
•	определить перегруженную версию виртуального метода object DeepCopy(); 
•	реализовать интерфейс IDateAndCopy; 
•	определить свойство типа int с  методами  get  и  set для доступа  к полю с номером 
группы.  В  методе  set бросить  исключение,  если  присваиваемое  значение  меньше 
или  равно  100  или  больше  599.  При  создании  объекта-исключения  использовать 
один из определенных в библиотеке CLR  классов-исключений,  инициализировать 
объект-исключение  с  помощью  конструктора  с  параметром  типа  string,  в 
сообщении передать информацию о допустимых границах для значения свойства. 
(18)В отдельном методе Main() 
1.  Создать  один  объект  типа  Student,  преобразовать  данные  в  текстовый вид с 
помощью метода ToShortString() и вывести данные. 

2.  Присвоить    значения    всем    определенным    в    типе    Student    свойствам, 
преобразовать    данные   в   текстовый   вид    с    помощью   метода    ToString()    и 
вывести данные. 

3.  C  помощью  метода  AddExams(params  Exam[])   добавить  элементы  в список  
экзаменов  и  вывести  данные  объекта  Student,  используя  метод ToString(). 

4.  Создать  два  объекта  типа    Person    с  совпадающими  данными  и  проверить,  что 
ссылки на объекты не равны, а объекты равны, вывести значения хэш-кодов для 
объектов. 

5.  Создать   объект    типа    Student,    добавить    элементы    в    список    экзаменов    и 
зачетов, вывести данные объекта Student.  

6.  Вывести значение свойства типа Person для объекта типа Student. 

7.  С   помощью    метода   DeepCopy()    создать    полную    копию    объекта    Student. 
Изменить  данные  в  исходном  объекте  Student  и  вывести  копию  и исходный 
объект, полная копия исходного объекта должна остаться без изменений.  

8.  В    блоке    try/catch    присвоить    свойству    с    номером    группы    некорректное 
значение,  в  обработчике   исключения   вывести   сообщение,  переданное через 
объект-исключение.  
9.  С  помощью  оператора  foreach  вывести список всех зачетов и экзаменов.  

10. С  помощью  оператора  foreach  для  итератора  с  параметром вывести  список  
всех  экзаменов  с оценкой выше 3.
